/*
 *  최초 Solution. (2016-11-08)
 *  문제점 : 알고리즘은 dp를 써야되는데 어떻게 접목해야 할 지 감이 안잡힌다.
 *  해결책 : 공식 유도를 해보려 했는데 도저히 해결이 되지 않는다.
 *         이 문제는 연산'횟수'의 최소값을 구하는 문제이다.
 *         대부분 '횟수'를 구하는 문제는 정확한 Solution보다는
 *         이를 Count할 수 있는 꼼수(?)로 풀리는 경우가 많다.
 *         문제 자체와 계산식의 순서를 고려해 count 횟수만
 *         체크하는 방법을 찾아내는 것이 중요한 듯 하다.
 *         -------아래는 정답자의 solution 이다-------
 *         접근 방식
 *         i) 최초 2, 3번째 인덱스는 1번의 연산을 통해 1을 만들 수 있다는 점을 기억한다.
 *         ii) 4는 2로 나누어 떨어지며, -1을 하면 3이다. 따라서 dp[4] = dp[2]+1 or dp[3]+1 즉 2이다.
 *         iii) 5는 -1밖에 할 수 있는 연산이 없으며, -1을 하면 4, 즉 dp[5] = dp[4]+1 = 3이다.
 *         .
 *         .
 *         .
 *         이런식으로 접근하는 것이다.
 */
import java.util.Scanner;

public class Main{

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int dp[] = new int[n+1];

        for(int i=2;i<=n;i++){
            dp[i] = dp[i-1]+1;
            if(i%2==0 && dp[i]>dp[i/2]+1)
                dp[i] = dp[i/2]+1;
            if(i%3==0 && dp[i]>dp[i/3]+1)
                dp[i] = dp[i/3]+1;
            System.out.print(dp[i]+" ");
        }

        System.out.println(dp[n]);
    }
}
