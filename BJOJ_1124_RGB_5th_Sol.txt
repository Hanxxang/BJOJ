/*
 *  최초 Solution. (2016-11-02)
 *  문제점 : 예제 Test Case와 1 2 3 / 4 100 200 / 5 6 7 Test Case는 값이 잘 나온다.
 *  해결책 : 어떤 Test Case일 때 출력이 틀릴지 생각해본다.
 *  .....문제점 발견
 *  1 10 100
 *  100 5 50
 *  100 20 100
 *  의 Case를 생각해보자.
 *  실제 답은 1, 50, 20 = 71 이지만,
 *  현재 알고리즘으로는 10, 50, 20 = 80 으로 나타난다.
 *  Why? min() method 때문이다.
 *  
 *  해결책 : i=0부터 가지를 흩뿌리며 이진트리로 탐색하는 문제가 아니었다.
 *  이 문제는 확실히 dp 문제이며, 해결책은 다음과 같다.
 *  <위의 실패한 test case를 이용한다.>
 *  
 *  1) i=0일 때.
 *  	dp[0][0] = 1, dp[0][1] = 10, dp[0][2] = 100 을 저장한다.
 *  2) i=1일 때.
 *  	dp[1][0] = 100 + min(dp[0][1], dp[0][2])
 *  	dp[1][1] = 5 + min(dp[0][0], dp[0][2])
 *  	dp[1][2] = 50 + min(dp[0][0], dp[0][1])
 *  3) i=2일 때.
 *  	dp[2][0] = 100 + min(dp[1][1], dp[1][2])... 이런식이다.
 *  
 *  --------> 접근 방법 자체가 잘못되었었다.
 *  		  dp의 핵심은 '해'를 배열에 저장하고 이를 '이용'하는 것이다.
 *            항상 머릿속에 박아두자.
 */



import java.util.Scanner;

public class Main {

	static int rgb[][];
	static int dp[][];
	
	public static void main(String args[]){
		Scanner scan = new Scanner(System.in);
		
		int T = scan.nextInt();
	
		rgb = new int[T][3];
		dp = new int[T][3];
		
		for(int i=0; i<T; i++){
			rgb[i][0] = scan.nextInt();
			rgb[i][1] = scan.nextInt();
			rgb[i][2] = scan.nextInt();
		}

		for(int i=0; i<T; i++){
			if(i==0){
				dp[i][0] = rgb[i][0];
				dp[i][1] = rgb[i][1];
				dp[i][2] = rgb[i][2];
			} else{
				dp[i][0] = rgb[i][0] + min(dp[i-1][1], dp[i-1][2]);
				dp[i][1] = rgb[i][1] + min(dp[i-1][0], dp[i-1][2]);
				dp[i][2] = rgb[i][2] + min(dp[i-1][0], dp[i-1][1]);
			}
		}
		
		System.out.println(min(dp[T-1][0], dp[T-1][1], dp[T-1][2]));
		
	}
	
	public static int min(int first, int second){
		if(first<=second){
			return first;
		} else {
			return second;
		}
	}
	
	public static int min(int num1, int num2, int num3){
		if(num1<=num2 && num1<=num3) return num1;
		else if(num2<=num1 && num2<=num3) return num2;
		else return num3;
	}
}