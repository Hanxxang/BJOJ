/*
 *  최초 Solution. (2016-10-24)
 *  문제점 : 탐욕적 알고리즘으로 실행됨.
 *  해결책 : 1 2 3
 *         4 100 200
 *         5 6 7
 *  이 test case를 적용할 수 있어야 한다.
 *  --> Back Tracking을 사용해본다.
 *  
 *  Step 1. main의 if~else를 '재귀적' 으로 바꿔서 간소화한다.
 *  Step 2. min() method 에서 재귀처리와 가지치기가 가능한지 생각한다.
 *  Step 3. 첫 번째 집에서 어떤 색을 선택하느냐에 따라 그 이후로 '완전 이진 트리' 가 된다. 이를 고려한다.
 *  Step 4. 그렇다면 i=0 일 때와 i=1 ~ i<n 일때를 분리한다.
 *  Step 5. 1st house 에서 어떤 색을 고르는지, 그에 따른 minimum 값을 배열에 넣는다.
 *  Step 6. 배열 값을 비교하여 최솟값중의 최솟값을 찾는다.
 */



import java.util.Scanner;

 
public class Main {

	static int minimum = 0;
	
	public static void main(String args[]){
		Scanner scan = new Scanner(System.in);
		
		int T = scan.nextInt();
		int red, green, blue;
		int next_fst=0, next_snd=0;
		int result=0;
		
		for(int i=0; i<T; i++){
			red = scan.nextInt();
			green = scan.nextInt();
			blue = scan.nextInt();
			
			if(i==0){
				if(min(red, green, blue)==red){
					result += red;
					minimum = 1;
				} else if(min(red, green, blue)==green){
					result += green;
					minimum = 2;
				} else{
					result += blue;
					minimum = 3;
				}
			}
			else{
				if(minimum == 1){
					if(min(green, blue) == green){
						minimum = 2;
						result += green;
					} else{
						minimum = 3;
						result += blue;
					}
				}
				else if(minimum == 2){
					if(min(red, blue) == red){
						minimum = 1;
						result += red;
					} else{
						minimum = 3;
						result += blue;
					}
				}
				else{
					if(min(red, green) == red){
						minimum = 1;
						result += red;
					} else{
						minimum = 2;
						result += green;
					}
				}
			}
		}
		
		System.out.println(result);
		
	}
	
	public static int min(int r, int g, int b){
		
		if(r<=g && r<=b) return r;
		else if(g<=b && g<= r) return g;
		else return b;
	}
	
	public static int min(int first, int second){
		if(first<=second) return first;
		else return second;
	}
}